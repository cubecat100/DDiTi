<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

<section class="content row col-12 hold-transition light-skin sidebar-mini theme-primary fixed">
	<div class="col-2 bg-white"></div>
	<div class="col-6 text-center h-80 bg-white" id="chartHead"></div>
	<div class="col-4 bg-white"></div>
	<div class="col-12 text-end h-50 " id="chartInfo"></div>
	<div class="col-2">
	</div>
	<div class="col-6" style="" id="chartBody">
		<div class="box">
			<div class="box-body">
				<h4 class="box-title">Pie Chart</h4>
				<div>
					<canvas id="pie-chart1" height="200"></canvas>
				</div>
			</div>
		</div>
	</div>
	
	
	<div class="col-4">
		<!-- <button onclick="getViewDate()">test</button> -->
	</div>
</section>

<script src="${pageContext.request.contextPath}/resources/assets/vendor_components/chart.js-master/Chart.min.js"></script>
<script src="${pageContext.request.contextPath}/resources/js/chat.js"></script>
<script>

var srvNo = parseInt("${srvNo }");

function test() {
	var date = new Date();
	console.log(date.getDay());
	
	var temp = dateFormat(new Date(
			date.getFullYear(),
			date.getMonth(),
			date.getDate() - date.getDay() + 1
		)).substr(0,10)
		
	console.log(temp)
}

$(function () {
	
	
	new Chart(
		    document.getElementById('pie-chart1'),
		    {
		      type: 'bar',
		      options: {
		        animation: false,
		        plugins: {
		          legend: {
		            display: false
		          },
		          tooltip: {
		            enabled: false
		          }
		        }
		      },
		      data: {
		        labels: data.map(row => row.year),
		        datasets: [
		          {
		            label: 'Acquisitions by year',
		            data: data.map(row => row.count)
		          }
		        ]
		      }
		    }
		  );
	
	$.ajax({
		type: "get",
		url : "/DYUniv/surveyDetail.ajax?srvNo="+srvNo,
		contentType : "application/json; charset=utf-8",
		success : function(res){
			console.log(res);
			
			if(res == null || res.length == 0){
				// alert("일치하는 정보가 없습니다...")
				Swal.fire({
					icon: 'error',
					title: '잘못된 접근입니다.', 
					text: '',
			    });
		 		location.href = "/DYUniv/surveyResult.do";
		 	} else {
		 		$("#chartHead").append('<h2>' + res.srvName + '<h2>');
		 		$("#chartHead").append('<h5> 총 참여 인원 : ' + res.srvRegCount + '명 <h5>');
		 		srvRegChart(res.srvResultList, res.srvQstList.length);
		 		srvChart(res);
		 	}
		}

	});
	
})

function srvRegChart(regDataList, regMem) {
	//console.log("dateList :", regDataList);
	
	//출력할 날짜 설정
	var dateList = getViewDate();
	
	// 날짜에 맞는 데이터 추가
	for (var i = 0; i < regDataList.length; i++) {
		var dateStr = regDataList[i].svrResDate.substr(0,10);
		
		for (var j = 0; j < dateList.length; j++) {
			if(dateList[j].date == dateStr){
				dateList[j].cnt += 1;
			}
		}
	}
	
	for (var i = 0; i < dateList.length; i++) {
		dateList[i].cnt /= regMem;
	}
	
	console.log("date :", regMem, dateList);
	createLineChart(dateList);
}

function createLineChart(chartData){
	var code = '<div class="box">	<div class="box-body">	<h4 class="box-title">일일 응답자수</h4> <div>'
		+'<canvas id="line-chart" height="200"></canvas>	</div></div></div>';
	$("#chartBody").append(code);
	
	var labels = [];
	var data = [];
	
	for (var i = 0; i < chartData.length; i++) {
		labels.push(chartData[i].date);
		data.push(chartData[i].cnt);
	}
	
	new Chart(document.getElementById("line-chart"), {
		type: 'bar',
 		data: {
			labels: labels,
			datasets: [{ 
				data: data,
				label: "설문자 수",
				borderColor: "#689f38",
				fill: true
			}]
		},
		options: {
			title: {
				display: true,
				text: '응답자',
			},
			scales: {
				y : {
					beginAtZero: true,
					stepSize : 1,
					afterDataLimits: (scale) => {        // y축의 최대값은 데이터의 최대값에 딱 맞춰져서 그려지므로        
						// y축 위쪽 여유공간이 없어 좀 답답한 느낌이 들 수 있는데요,        
						// 이와 같이 afterDataLimits 콜백을 사용하여 y축의 최대값을 좀 더 여유있게 지정할 수 있습니다!        
						scale.max = scale.max * 1.2;      
					},
				}
			},
		}
	});
}


function getViewDate() {
	var viewDate = [];
	
	var date = new Date();
	//console.log("date origin :",dateFormat(date));
	for (var i = 0; i < 7; i++) {
		var temp = dateFormat(new Date(
				date.getFullYear(),
				date.getMonth(),
				date.getDate() - 6 + i
			)).substr(0,10)
		
		var vd = {
			"date" : temp,
			"cnt" : 0
		}
		viewDate.push(vd);
	}
	
	return viewDate;
}

function srvChart(srv) {
	
	var qstList = srv.srvQstList;
	var resList = srv.srvResultList;
	var srvRegCount = srv.srvRegCount;
	
	if(resList.length == 1 && resList[0].svrResAns == null){
		// 참여 인원 없음
		return;
	}
	
	for (var i = 0; i < qstList.length; i++) {
		var qst = qstList[i].srvQst;
		var srvQstNo = qstList[i].srvQstNo;
		var chList = qstList[i].srvQstChList
		var qstData = [];
		
		for (var j = 0; j < chList.length; j++) {
			var str = chList[j].chNo +". "+ chList[j].chStr;
			var data = {
					chStr : str,
					cnt : 0
			}
			qstData.push(data);
		}
		
		//console.log("qstData : ", qstData);
		
		//질문마다 데이터 뽑기
		//응답 데이터 없을때 처리할것 
		
		for (var j = 0; j < resList.length; j++) {
			var chStr = resList[j].chList;
			
			if(srvQstNo == resList[j].srvQstNo){
				var ans = resList[j].svrResAns;
				//console.log("ans :", ans);
				qstData[ans-1].cnt += 1;
			}
		}
		
		//console.log("qstData : ", qstData);
		
		// 차트 생성
		createPiChart(qstData, qst, qstList[i].qstNo);
	}
}

function createPiChart(chartData, qstName, qstNo) {
	
	var code = '<div class="box">	<div class="box-body">	<h4 class="box-title">'+ qstName +'</h4>'
				+'<div> <canvas id="pie-chart' + qstNo +'" height="200"></canvas>	</div></div></div>'
	$("#chartBody").append(code);
				
	var ctx = document.getElementById("pie-chart"+qstNo).getContext("2d");
	var chartLabels = [];
	var srvChartData = [];
	var chartBgColor = [];
	
	for (var i = 0; i < chartData.length; i++) {
		chartLabels.push(chartData[i].chStr);
		srvChartData.push(chartData[i].cnt);
		chartBgColor.push(getRandomColor());
	}
	
	var data = {
		labels: chartLabels,
		datasets: [
			{
			data: srvChartData,
			backgroundColor: chartBgColor
			//hoverBackgroundColor: []
		}]
	}
	
	//console.log("chart Data : ",data)
	
	var pieChart  = new Chart(ctx,{
		type: 'pie',
		data: data,
		options: {
			animation: {
				duration:	1000
			},
			responsive: true,
			legend: {
				labels: {
				fontFamily: "Nunito Sans",
				fontColor:"#878787"
				}
			},
			tooltip: {
				backgroundColor:'rgba(33,33,33,1)',
				cornerRadius:0,
				footerFontFamily:"'Nunito Sans'"
			},
			elements: {
				arc: {
					borderWidth: 0
				}
			}
		}
	});
}

function getRandomColor() {
	var color = Math.floor(Math.random() * 127 + 128).toString(16);
	color += Math.floor(Math.random() * 127 + 128).toString(16);
	color += Math.floor(Math.random() * 127 + 128).toString(16);
	return "#"+color;
}
</script>

























package kr.or.ddit.service.impl;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.entity.ServiceResult;
import kr.or.ddit.mapper.IClassManagementMapper;
import kr.or.ddit.mapper.IFileMapper;
import kr.or.ddit.service.IClassManagementService;
import kr.or.ddit.vo.ClassBoardVO;
import kr.or.ddit.vo.ClassVO;
import kr.or.ddit.vo.ExamAnswerVO;
import kr.or.ddit.vo.FilesVO;
import kr.or.ddit.vo.HomeworkSubmitVO;
import kr.or.ddit.vo.HomeworkVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class ClassManagementImpl implements IClassManagementService {

	@Inject
	private IClassManagementMapper classManagementMapper;

	@Inject
	private IFileMapper fileMapper;
	
	@Override
	public List<ClassVO> progressClassList(int memNo) {
		return classManagementMapper.progressClassList(memNo);
	}

	@Transactional(rollbackFor = Exception.class)
	@Override
	public ServiceResult addClassBrd(ClassBoardVO classBoardVO) {
		ServiceResult res = ServiceResult.FAILED;
		
		int filesCnt = 0;
		int brdCnt = 0;
		
		List<FilesVO> files = classBoardVO.getFileList();
		System.out.println("files : " + files);
		
		try {
			//파일 업로드
			if(files != null && files.size() > 0) {		//업로드할 파일이 있을때 
				log.info("is file...");
				
				//파일 번호 설정
				int fileNo = fileMapper.getFileSeq();
				for(FilesVO file : files) {
					file.setFileNo(fileNo);
				}
				
				filesCnt += fileMapper.addFile(files);
				
				//자료실 게시글 등록
				if(filesCnt == files.size()) {		//업로드 파일 갯수가 같을때
					classBoardVO.setFileNo(fileNo);
					brdCnt = classManagementMapper.addClassBrd(classBoardVO);
				}
			} else {	//업로드 파일이 없을때
				log.info("is not file...");
				//자료실 게시글 등록
				brdCnt = classManagementMapper.addClassBrd(classBoardVO);
			}
			//결과 반환, 에러처리
			if(brdCnt == 1) {
				res = ServiceResult.OK;
			} else {
				throw new Exception();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ServiceResult.FAILED;
		}
		return res;
	}

	@Override
	public ServiceResult addClassHomework(HomeworkVO hwVO) {
		ServiceResult res = ServiceResult.FAILED;
		
		int filesCnt = 0;
		int brdCnt = 0;
		
		List<FilesVO> files = hwVO.getFileList();
		System.out.println("files : " + files);
		
		try {
			//파일 업로드
			if(files != null && files.size() > 0) {		//업로드할 파일이 있을때 
				//파일 번호 설정
				int fileNo = fileMapper.getFileSeq();
				for(FilesVO file : files) {
					file.setFileNo(fileNo);
				}
				
				filesCnt += fileMapper.addFile(files);
				
				//자료실 게시글 등록
				if(filesCnt == files.size()) {		//업로드 파일 갯수가 같을때
					hwVO.setFileNo(fileNo);
					brdCnt = classManagementMapper.addClassHomework(hwVO);
				}
			} else {	//업로드 파일이 없을때
				//자료실 게시글 등록
				brdCnt = classManagementMapper.addClassHomework(hwVO);
			}
			//결과 반환, 에러처리
			if(brdCnt == 1) {
				res = ServiceResult.OK;
			} else {
				throw new Exception();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ServiceResult.FAILED;
		}
		return res;
	}

	@Override
	public List<HomeworkSubmitVO> getHwSubmitList(int classNo) {
		return classManagementMapper.getHwSubmitList(classNo);
	}

	@Override
	public List<HomeworkSubmitVO> getHwSubList(int hwNo) {
		return classManagementMapper.getHwSubList(hwNo);
	}

	@Transactional(rollbackFor = Exception.class)
	@Override
	public ServiceResult updateHwScore(List<HomeworkSubmitVO> hwSubList) {
		ServiceResult res = ServiceResult.FAILED;
		
		int cnt = 0;
		
		try {
			
			for (int i = 0; i < hwSubList.size(); i++) {
				cnt += classManagementMapper.updateHwScore(hwSubList.get(i));
			}
			
			if(cnt != hwSubList.size()) {
				log.info("update cnt : "+ cnt);
				log.info("update hwSubList : "+ hwSubList);
				log.info("hwSubList size : "+ hwSubList.size());
				
				throw new Exception();
			} else {
				res = ServiceResult.OK;
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		return res;
	}

	@Override
	public List<ExamAnswerVO> getExSubList(int examNo) {
		return classManagementMapper.getExSubList(examNo);
	}
	
	
}

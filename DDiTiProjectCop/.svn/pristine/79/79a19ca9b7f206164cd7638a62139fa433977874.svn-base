package kr.or.ddit.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.entity.FileType;
import kr.or.ddit.entity.ServiceResult;
import kr.or.ddit.service.IBoardService;
import kr.or.ddit.utils.UploadFileUtils;
import kr.or.ddit.vo.AnonymousBoardVO;
import kr.or.ddit.vo.AnonymousReplyVO;
import kr.or.ddit.vo.BoardVO;
import kr.or.ddit.vo.FilesVO;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.PaginationVO;
import kr.or.ddit.vo.ReplyVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/DYUniv")
public class BoardController {

	@Inject
	private IBoardService boardService;

	// 게시판 관련

	// 공지 게시글 목록
	// 공지 게시글 상세
	// 공지 게시글 작성
	// 공지 게시글 수정

	// 분실물 게시글 목록

	// 익명 게시글 목록
	/*
	 * @RequestMapping(value="/ananyBoard.do",method= RequestMethod.GET) 
	 * public String anonyList(Model model) { 
		 * log.info("anonList() 실행");
		 * List<AnonymousBoardVO>boardList = boardService.anonylist();
		 * log.info("boardList() 결과물 : {}", boardList);
		 * model.addAttribute("boardList",boardList); 
		 * log.info("boardlist :"+ boardList); 
		 * return "student/anonymousBoard"; 
	 * }
	 */

	// 익명 페이징 검색 , 목록
	@RequestMapping(value = "/ananyBoard.do")
	public String anonyBoard(@RequestParam(name = "page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "title") String searchType,
			@RequestParam(required = false) String searchWord, Model model) {

		PaginationVO<AnonymousBoardVO> pagingVO = new PaginationVO<AnonymousBoardVO>();

		// 검색
		if (StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			model.addAttribute("searchType", searchType);
			model.addAttribute("searchWord", searchWord);
		}

		pagingVO.setCurrentPage(currentPage);

		int totalRecord = boardService.anonyCount(pagingVO); // 총 게시글 수 가져오기
		pagingVO.setTotalRecord(totalRecord);

		List<AnonymousBoardVO> dataList = boardService.anonyList(pagingVO);
		pagingVO.setDataList(dataList);

		model.addAttribute("pagingVO", pagingVO);

		log.info("pagingVO 값 => {}", pagingVO);

		return "student/anonymousBoard";
	}

	// 댓글 추가
	@RequestMapping(value = "/addComment", method = RequestMethod.POST)
	public String addComment(AnonymousReplyVO replyVO) {

		log.info("replyVO : " + replyVO);

		int res = boardService.addAnonComment(replyVO);

		log.info("res :" + res);

//    	if(res == 0) {
//    		return "success";
//    	} else {
//    		return "failed";
//    	}

		return "redirect:/DYUniv/anonymousDetail.do?anonBrdNo=" + replyVO.getAnonBrdNo();
	}

	// 댓글 삭제
	@RequestMapping(value = "/deleteComment.do", method = RequestMethod.POST)
	public String deleteComment(@RequestParam("anonRpNo") int anonRpNo, @RequestParam("anonBrdNo") int anonBrdNo,
			RedirectAttributes ra) {
		log.info("deleteComment() run..");
		log.info("anonRpNo : " + anonRpNo);

		int res = boardService.deleteComment(anonRpNo);

		if (res == 1) {
			ra.addFlashAttribute("message", "삭제 완료");
		} else {
			ra.addFlashAttribute("message", "삭제 실패");
		}
		return "redirect:/DYUniv/anonymousDetail.do?anonBrdNo=" + anonBrdNo;
	}

	@RequestMapping(value = "/ananytest2", method = RequestMethod.GET)
	public String anonytest1(Model model) {
		return "student/anonymousInsert";
	}

	@RequestMapping(value = "/ananytest3", method = RequestMethod.GET)
	public String anonytest2(Model model) {
		return "student/anonymousInsert";
	}

	// 익명 게시글 상세 + 익명 댓글 목록

	@RequestMapping(value = "/anonymousDetail.do", method = RequestMethod.GET)
	public String anonyDetail(int anonBrdNo, Model model, HttpServletRequest req) {
		log.info("anonyDetail() 실행");
		log.info("넘겨받은 anonBrdNo : " + anonBrdNo);

		MemberVO memberVO = (MemberVO) req.getSession().getAttribute("member");
		model.addAttribute("member", memberVO);

		AnonymousBoardVO anonyVO = boardService.anoyDetail(anonBrdNo);
		model.addAttribute("anonyVO", anonyVO);

		List<AnonymousReplyVO> replyList = boardService.getAnonComments(anonBrdNo);
		model.addAttribute("replyList", replyList);

		return "student/anonymousDetail";
	}

	/*
	 * @RequestMapping(value="/anonymousDetail.do", method= RequestMethod.GET)
	 * public String anonyReply(int rpNo,Model model) { 
	 *  log.info("anonyReply() 실행" ); 
	 * log.info("넘겨받은 rpNo : " + rpNo); 
	 * ReplyVO replyVO = boardService.anonyReply(rpNo);
	 *  model.addAttribute("replyVO",replyVO); 
	 *  return "student/anonymousDetail"; 
	 *  
	 *  }
	 */
	// 익명 게시글 작성
	@RequestMapping(value = "/anonymousInsertForm.do", method = RequestMethod.GET)
	public String anonyInsertForm() {
		log.info("anonyInsertForm() 실행...!");

		return "student/anonymousInsert";

	}

	@RequestMapping(value = "/anonymousInsert.do", method = RequestMethod.POST)
	public String crudRegister(AnonymousBoardVO anonymousBoardVO, Model model, HttpServletRequest request)
			throws IOException {
		log.info("crudRegister() 실행...!");

		HttpSession session = request.getSession();
		MemberVO member = (MemberVO) session.getAttribute("member");

		int memNo = member.getMemNo();

		log.info("member 값 => {}", member);
		log.info("memNo 값 => " + memNo);

		anonymousBoardVO.setMemNo(memNo);

		boardService.anonyInsert(anonymousBoardVO);
		// 게시글을 입력 후 최신 게시글 번호가 담겨있다(boardNo)
		log.info("게시글 등록 후 만들어진 최신 게시글 번호 : " + anonymousBoardVO.getAnonBrdNo());

		model.addAttribute("msg", "등록이 완료되었습니다!");
		return "redirect:/DYUniv/anonymousDetail.do?anonBrdNo=" + anonymousBoardVO.getAnonBrdNo();
	}

	@RequestMapping(value = "/anonytest", method = RequestMethod.GET)
	public String test(AnonymousBoardVO anonymousBoardVO, Model model) {
		return "student/anonymousInsert";
	}

	// 익명 게시글 삭제

	@RequestMapping(value = "/anonymousDelete.do", method = RequestMethod.POST)
	public String anonyDelete(HttpServletRequest req, int anonBrdNo, Model model, RedirectAttributes ra) {
		String goPage = "";

		ServiceResult result = boardService.deleteAnony(req, anonBrdNo);
		if (result.equals(ServiceResult.OK)) { // 삭제 성공
			goPage = "redirect:/DYUniv/ananyBoard.do";
			ra.addFlashAttribute("message", "게시글 삭제가 완료 되었습니다!");
		} else { // 삭제 실패
			goPage = "redirect:/DYUniv/anonymousDetail.do?anonBrdNo=" + anonBrdNo;
		}
		return goPage;
	}

	// 익명 댓글 작성
	// 익명 댓글 삭제

	// 강의 자료실 게시글 목록
	// 강의 게시글 상세
	// 강의 게시글 작성

	// 공지사항
	@RequestMapping(value = "/noticeBoard.do")
	public String noticeBoard(@RequestParam(name = "page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "title") String searchType,
			@RequestParam(required = false) String searchWord, HttpServletRequest request, Model model) {

		PaginationVO<BoardVO> pagingVO = new PaginationVO<BoardVO>();

		// 검색
		if (StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			model.addAttribute("searchType", searchType);
			model.addAttribute("searchWord", searchWord);
		}

		pagingVO.setCurrentPage(currentPage);

		int totalRecord = boardService.noticeBoardListCnt(pagingVO);
		pagingVO.setTotalRecord(totalRecord);

		List<BoardVO> dataList = boardService.noticeBoardList(pagingVO);
		pagingVO.setDataList(dataList);

		HttpSession session = request.getSession();
		MemberVO member = (MemberVO) session.getAttribute("member");

		String memRole = member.getMemRole();

		model.addAttribute("memRole", memRole);
		model.addAttribute("pagingVO", pagingVO);

		return "employer/noticeBoard";
	}

	@RequestMapping(value = "/noticeBoardDetail.do/{brdNo}", method = RequestMethod.GET)
	public String detailNotice(
			  @PathVariable("brdNo") int brdNo
			, HttpServletRequest request
			, Model model) {
		HttpSession session = request.getSession();
		MemberVO member = (MemberVO) session.getAttribute("member");

		String memRole = member.getMemRole();
		model.addAttribute("memRole", memRole);
		
		BoardVO boardVO = boardService.getBoardData(brdNo);
		model.addAttribute("boardVO", boardVO);
		
		log.info("boardVO : ", boardVO);
		
		return "employer/noticeBoardDetail";
	}
	
	/*
	 * @PostMapping("/noticeBoardDelete.do") public String
	 * deleteNotice(@RequestParam int brdNo, RedirectAttributes ra) {
	 * 
	 * ServiceResult res = boardService.deleteNotice(brdNo);
	 * 
	 * if(res.equals(ServiceResult.OK)) { ra.addFlashAttribute("message",
	 * "삭제에 성공하였습니다"); } else { ra.addFlashAttribute("message", "삭제에 실패하였습니다"); }
	 * 
	 * return "redirect:/DYUniv/noticeBoard.do"; }
	 */
	
	//  공지사항 수정
	@GetMapping("/noticeBoardModify.do")
	public String ModifyNoticeGet() {
		return "employee/noticeBoardModify";
	}
	@PostMapping("/noticeBoardModify.do")
	public String ModifyNoticePost() {
		return "employee/noticeBoardModify";
	}

	// 분실물 게시글 목록
	@GetMapping("/lostItemBoard.do")
	public String lostItemBoard(Model model) {

		List<BoardVO> lostItemList = boardService.lostItems();
		model.addAttribute("lostItemList", lostItemList);

		return "employer/lostItemBoard";
	}

	// 등록
	@ResponseBody
	@PostMapping("/lostItemBoardinset.do")
	public String lostItemBoardinsert(BoardVO boardVO, HttpSession session, HttpServletRequest req,
			RedirectAttributes ra) {

		List<FilesVO> fileList = new ArrayList<FilesVO>();

		try {
			if (boardVO.getFileList() != null && boardVO.getFileList().size() > 0) {
				for (int i = 0; i < boardVO.getFiles().length; i++) {
					FilesVO filesVO = UploadFileUtils.uploadFile(boardVO.getFiles()[i], FileType.HOMEWORK_SUBMIT, req,
							boardVO.getBrdNo());

					filesVO.setFileGroupNo(i + 1);
					fileList.add(filesVO);
				}
				if (boardVO.getFiles().length != fileList.size()) {
					throw new Exception();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();

			ra.addFlashAttribute("message", "파일 등록에 실패!!!");

			return "redirect:/DYUniv/employer/lostItemBoard/" + boardVO.getBrdNo();
		}
		log.debug("fileList : " + fileList);

		boardVO.setFileList(fileList);
		ServiceResult res = boardService.insertLostItem(boardVO);

		if (res.equals(ServiceResult.OK)) {
			ra.addFlashAttribute("message", "저장에 성공하였습니다");
		} else {
			ra.addFlashAttribute("message", "저장에 실패하였습니다");
		}

		return "redirect:/DYUniv/employer/lostItemBoard";

	}

}

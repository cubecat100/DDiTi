package kr.or.ddit.service.impl;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.entity.ServiceResult;
import kr.or.ddit.mapper.ICounselMapper;
import kr.or.ddit.service.ICounselService;
import kr.or.ddit.vo.ChatRecordVO;
import kr.or.ddit.vo.CounselVO;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.ScheduleDataVO;

@Service
public class CounselServiceImpl implements ICounselService {

	@Inject
	ICounselMapper counselMapper;
	
	@Override
	public List<CounselVO> getCounselList(int studentMemNo) {
		return counselMapper.getCounselList(studentMemNo);
	}

	@Override
	public ServiceResult addRecord(ChatRecordVO chatRecordVO) {
		ServiceResult res = null;
		int cnt = counselMapper.addRecord(chatRecordVO);
		if(cnt == 1) {
			res = ServiceResult.OK;
		} else {
			res = ServiceResult.FAILED;
		}
		return res;
	}

	@Override
	public List<ChatRecordVO> getRecordList(int chatRoomNo) {
		return counselMapper.getRecordList(chatRoomNo);
	}

	@Override
	public List<MemberVO> getCounselor() {
		return counselMapper.getCounselor();
	}

	@Override
	public List<ScheduleDataVO> counselSchDataList(int memNo) {
		return counselMapper.counselSchDataList(memNo);
	}

	@Transactional(rollbackFor = Exception.class)
	@Override
	public ServiceResult addReserveCousel(CounselVO counselVO, ScheduleDataVO dataVO) {
		ServiceResult res = null;
		
		int addcnt = counselMapper.addReserveCousel(counselVO);
		int modcnt = counselMapper.updateSchedule(dataVO);
		
		try {
			addcnt = counselMapper.addReserveCousel(counselVO);
			modcnt = counselMapper.updateSchedule(dataVO);
		} catch (Exception e) {
			e.printStackTrace();
			return ServiceResult.FAILED;
		}
		
		if(addcnt == 1 && modcnt == 1) {
			res = ServiceResult.OK;
		} else {
			res = ServiceResult.FAILED;
		}
		
		return res;
	}



}

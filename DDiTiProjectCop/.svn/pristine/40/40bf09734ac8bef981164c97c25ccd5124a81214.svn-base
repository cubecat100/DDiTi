package kr.or.ddit.controller;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import kr.or.ddit.entity.ServiceResult;
import kr.or.ddit.service.IBoardService;
import kr.or.ddit.service.IMemberService;
import kr.or.ddit.service.IUnivManagementService;
import kr.or.ddit.service.IWidgetService;
import kr.or.ddit.vo.BoardVO;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.ProfessorInfoVO;
import kr.or.ddit.vo.UnivScheduleVO;
import kr.or.ddit.vo.WidgetVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/")
public class MemberController {

	// 회원 정보 관련
	// 휴복학, 알림, 일정, 위젯 등

	// 학생 목록
	// 신입생 목록
	// 교수 목록

	// 학생 정보 상세
	// 교수 목록
	// 교수 정보 상세

	// 신입생 아이디 생성

	// 등록금 내역
	// 장학금 내역

	// 학적 변경 신청
	// 전과 신청

	// 일정 목록
	// 일정 등록
	// 일정 삭제

	// 이 밑으로 구현 ============================================

	@Inject
	private IMemberService memberService;
	@Inject
	private IBoardService boardService;
	@Inject
	private IUnivManagementService univService;
	@Inject
	private IWidgetService widgetService;

	// 학적 변동 신청
	@GetMapping("/restApplyForm.do")
	public String test1(Model model) {
		return "student/restApplyForm";
	}

	// 장학금 내역
	@GetMapping("/scholarship.do")
	public String scholarship(Model model) {
		return "student/scholarship";
	}

	// 신입생 목록
	@GetMapping("/employer/fresh.do")
	public String newStuList(Model model) {
		List<MemberVO> memList = memberService.newStuList();
		model.addAttribute("newStuList", memList);

		System.out.println("dddddd" + memList.toString());

		return "employer/newStudentList";
	}

	// 교수 목록
	@GetMapping("/employer/proList.do")
	public String proList(Model model) {
		List<MemberVO> memList = memberService.ProList();
		model.addAttribute("proList", memList);
		System.out.println("proList========" + memList.toString());
		return "employer/proList";
	}

	// 교수 계정 생성
	@GetMapping("/employer/createProID.do")
	public String createProID(Model model, MemberVO memberVO) {
//		
//		ServiceResult res = memberService.addProId(memberVO);
//		
//		ServiceResult res2 = memberService.addProInfo(professorInfoVO);	
		return "employer/createProID";
	}

	// 학생 계정 생성
	@GetMapping("/employer/createStuID.do")
	public String createStuID(Model model, MemberVO memberVO) {
//		
//		ServiceResult res = memberService.addProId(memberVO);
//		
//		ServiceResult res2 = memberService.addProInfo(professorInfoVO);	
		return "employer/createStuID";
	}

	// 메인페이지 + 위젯(처음 생성해줄때 사용)
	@GetMapping("/student/mainpage.do")
	public String mainPageStd(Model model, HttpServletRequest request) throws Exception {
		log.info("mainPageStd() run...");
		HttpSession session = request.getSession();
		MemberVO member = (MemberVO) session.getAttribute("member");

		if (member == null) {
			return "redirect:/login.do";
		}

		List<WidgetVO> widgetList = widgetService.widgetList(member.getMemNo());

		if (widgetList == null || widgetList.size() == 0) {
			log.info("신입 등장");

			List<WidgetVO> widget = new ArrayList<>();
			if (!member.getMemRole().equals("ROL003")) { // 관리자에는 수강시간표 위젯이 없음
				widget.add(new WidgetVO(member.getMemNo(), 0, 0, 7, 3, null, "WID001"));
			}
			widget.add(new WidgetVO(member.getMemNo(), 7, 0, 5, 3, null, "WID002"));
			widget.add(new WidgetVO(member.getMemNo(), 0, 3, 6, 3, null, "WID003"));
			widget.add(new WidgetVO(member.getMemNo(), 6, 3, 6, 3, null, "WID004"));

			ServiceResult res = widgetService.createWidget(widget);

			widgetList = widgetService.widgetList(member.getMemNo());
		} else {
			log.info("widget not empty...");
			log.info("w : " + widgetList);
		}

		model.addAttribute("member", member);
		model.addAttribute("widgetList", widgetList);

		return "student/mainpage";
	}

	@GetMapping("/professor/mainpage.do")
	public String mainPagePro(Model model) {
		return "professor/mainpage";
	}

	@GetMapping("/employer/mainpage.do")
	public String mainPageEmp(Model model) {
		return "employer/mainpage";
	}

	
	
	
	
	// 비동기 처리 ============================================
	
	
	// 공지사항 위젯 비동기
	@GetMapping("/mainpage.do/notice")
	@ResponseBody
	public List<BoardVO> noticeWidget() {
		log.info("공지사항 위젯");
		List<BoardVO> noticeList = boardService.noticeWidget();

		return noticeList;
	}

	// 학사일정 위젯 비동기
	@GetMapping("/mainpage.do/univSchedule")
	@ResponseBody
	public List<UnivScheduleVO> univScheduleWidget() {

		log.info("학사일정 위젯");
		List<UnivScheduleVO> univScheduleList = univService.univScheduleWidget();

		return univScheduleList;
	}

	// 포틀릿 비동기 메소드
	@PutMapping("/mainpage.do/updateWidget")
	public int updateWidget(@RequestBody List<WidgetVO> widgetList) {
		return widgetService.updateWidget(widgetList);
	}

	// 포틀릿 테스트임
	@GetMapping("/student/mainpage2")
	public String mainPageStd2(Model model) {
		return "student/mainpage2";
	}
	
	@ResponseBody
	@RequestMapping(value = "/excelUpload.do", method = RequestMethod.POST)
	public ResponseEntity<String> excelUploadAjax(MultipartHttpServletRequest request) throws Exception{
	    
		String result = "failed";
	    MultipartFile excelFile = request.getFile("excelFile");

	    try { 
	        if(excelFile != null || !excelFile.isEmpty()) {
	            File destFile = new File("C:\\upload\\"+excelFile.getOriginalFilename()); // 파일위치 지정
	            excelFile.transferTo(destFile); // 엑셀파일 생성
	            
	            ServiceResult res = memberService.excelUpload(destFile); // service단 호출
	            
	            if(res.equals(ServiceResult.OK)) {
	            	result = "success";
	            }
	            
	            destFile.delete(); // 업로드된 엑셀파일 삭제
	        }else {
	        	
	        }
	    }catch(Exception e) {
	        e.printStackTrace();
	    } 
	    return new ResponseEntity<String>(result, HttpStatus.OK);
	}
}
package kr.or.ddit.controller;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.entity.FileType;
import kr.or.ddit.entity.ServiceResult;
import kr.or.ddit.service.IClassManagementService;
import kr.or.ddit.service.IClassService;
import kr.or.ddit.utils.UploadFileUtils;
import kr.or.ddit.vo.ClassBoardVO;
import kr.or.ddit.vo.ClassVO;
import kr.or.ddit.vo.ExampleVO;
import kr.or.ddit.vo.FilesVO;
import kr.or.ddit.vo.HomeworkVO;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.MyClassVO;
import kr.or.ddit.vo.TrainingVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/DYUniv")
public class ClassManagementController {

	@Inject
	private IClassManagementService classManagementService;
	
	@Inject
	private IClassService classService;
	
	@GetMapping("/myProgressClassList.do")
	public String myProgressClassList(Model model, HttpServletRequest req) {
		
		MemberVO member = (MemberVO) req.getSession().getAttribute("member");
		
		List<ClassVO> myClassList = classManagementService.progressClassList(member.getMemNo());
		model.addAttribute("myClassList", myClassList);
		
		return "professor/myClassList";
	}
	
	@GetMapping("/managementClassRoom/{classNo}")
	public String progressClassRoom(@PathVariable("classNo") int classNo, Model model) {
		
		//내 강의 정보
		MyClassVO myClassVO = classService.getMyLecture(classNo);
		model.addAttribute("myClassVO", myClassVO);
		
		//강의자료실
		List<ClassBoardVO> classBoardList = classService.getClassBoardList(classNo);
		model.addAttribute("classBoardList", classBoardList);
		
		//강의 과제
		List<HomeworkVO> homeworkList = classService.getHomeworkList(classNo);
		model.addAttribute("homeworkList", homeworkList);
		
		//온라인 시험
		List<ExampleVO> exampleList = classService.getExampleList(classNo);
		
		model.addAttribute("exampleList", exampleList);
		
		//현장실습
		List<TrainingVO> trainingList = classService.getTrainingList(classNo);
		model.addAttribute("trainingList", trainingList);
		
		return "professor/classRoom";
	}
	
	@PostMapping("/class/classBrdForm.do")
	public String classBrdUpload(ClassBoardVO classBoardVO, HttpServletRequest req,
			RedirectAttributes ra
			) {
		
		log.info("classBrdUpload > classBoardVO : " + classBoardVO);
		
		List<FilesVO> filesList = new ArrayList<FilesVO>();
		
		//파일 업로드
		try {
			for (int i=0; i<classBoardVO.getFiles().length; i++) {
				FilesVO filesVO = UploadFileUtils.uploadFile(classBoardVO.getFiles()[i], FileType.BOARD, req, classBoardVO.getClassNo());
				filesVO.setFileGroupNo(i + 1);
				filesList.add(filesVO);
			}
			
			if(classBoardVO.getFiles().length != filesList.size()) {
				throw new Exception();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			ra.addFlashAttribute("message", "파일 등록에 실패하였습니다");
			return "redirect:/DYUniv/managementClassRoom/" + classBoardVO.getClassNo();
		}
		
		log.info("filesList : " + filesList);
		
		classBoardVO.setFileList(filesList);
		
		ServiceResult res = classManagementService.addClassBrd(classBoardVO);
		
		if(res.equals(ServiceResult.OK)) {
			ra.addFlashAttribute("message", "파일 등록에 성공하였습니다");
		} else {
			ra.addFlashAttribute("message", "파일 등록에 실패하였습니다");
		}
		
		return "redirect:/DYUniv/managementClassRoom/" + classBoardVO.getClassNo();
	}
	
}

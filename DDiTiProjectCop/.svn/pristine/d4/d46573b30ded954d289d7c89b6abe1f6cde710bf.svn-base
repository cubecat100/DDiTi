<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<style>
.boxParent {
	padding: 1.5rem;
	justify-content: space-around;
}

.content {
	position: relative;
}

#listBtn {
	position: absolute;
	top: -25px;
	right: 53px;
}

/*  */
#notification {
	position: absolute;
	z-index: 1;
	text-align: center;
	color: #fff;
	margin: 0;
	top: 47.33px;
	font-size: 18pt;
	width: 100%;
	background-color: orange;
}

#remote-video {
	height : 100%;
	width: 100%;
	object-fit: cover;
	background-color: #ccc;
	border: 1px solid #ccc;
	border-radius: 10px; 
}

#local-video {
	position: absolute;
	top: 137px;
    left: 45px;
	width: 300px;
	height: 150px;
	object-fit: cover;
	z-index: 1;
	background-color: #444444;
	border-radius: 10px; 
	border: 1px solid #444;
}

#stopBtn {
	position: absolute;
	bottom: 40px;
	right: 40px;
}
</style>

<div class="container-full">
	<!-- 페이지 헤더 -->
	<div class="content-header">
		<div class="d-flex align-items-center">
			<div class="me-auto">
				<h3 class="page-title">상담(화상)</h3>
				<div class="d-inline-block align-items-center">
					<nav>
						<ol class="breadcrumb">
							<li class="breadcrumb-item"><a href="#"><i
									class="mdi mdi-home-outline"></i></a></li>
							<li class="breadcrumb-item" aria-current="page">상담 관리</li>
							<li class="breadcrumb-item" aria-current="page">상담 신청 내역</li>
							<li class="breadcrumb-item active" aria-current="page">상담(화상)</li>
						</ol>
					</nav>
				</div>
			</div>

		</div>
	</div>
	<!-- 페이지 컨텐츠 -->
	<section class="content">
		<!-- 뒤로가기(목록) 버튼 -->
		<button type="button" class="btn btn-primary" id="listBtn">목록으로
			가기</button>

		<div class="row boxParent">
			<div class="box b-1 border-secondary" style="width: 63%">
				<div class="box-header">
					<p id="notification" hidden></p>
					<input id="room-input" class="room-input" type="hidden" value="${chatRoomNo }">
					<div>
						<button onclick="createRoom()">방만들기</button>
						<button onclick="joinRoom()">참여하기</button>
					</div>
				</div>
				<div class="box-body" style="height: 535px; overflow-y: hidden;">
					<!-- 화상채팅 영역 -->
					<!-- Remote Video Element-->
					<video id="remote-video"></video>
					<!-- Local Video Element-->
					<video id="local-video"></video>

					<button type="button" class="btn btn-danger btn-circle"
						id="stopBtn">
						<i class="mdi mdi-phone-hangup"></i>
					</button>
				</div>
			</div>
			<div class="box" style="width: 33%">
				<div class="box-header with-border">
					<h4 class="box-title">상담 학생 인적 사항</h4>
				</div>
				<div class="box-body">
					<div class="table-responsive">
						<table class="table mb-0">
							<tbody>
								<tr>
									<th scope="col">이름</th>
									<td>${CounselMember.memName }</td>
								</tr>
							</tbody>
							<tbody>
								<tr>
									<th scope="row">신청일</th>
									<td>${counselVO.cnslRegDate }</td>
								</tr>
								<tr>
									<th scope="row">상담일</th>
									<td>${counselVO.cnslStartDate }</td>
								</tr>
								<tr>
									<th scope="row">신청사항</th>
									<td colspan="2">${counselVO.cnslReason }</td>
								</tr>
								<!-- 교수 -->
								<c:if test="${member.memRole eq 'ROL002' }">
									<tr>
										<th scope="row">상담 내용</th>
										<td><textarea placeholder="저장 전 반드시 작성해주세요."
												style="width: 100%; height: 100px; overflow: hidden;"></textarea>
										</td>
									</tr>
									<tr>
										<td colspan="2">
											<button type="button" class="btn btn-primary-light float-end">상담
												내용 저장</button>
										</td>
									</tr>
								</c:if>
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</section>
</div>

<script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>
<script type="text/javascript">
	const PRE = "DELTA"
	const SUF = "MEET"
	var room_id;
	var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
	var local_stream;
	var screenStream;
	var peer = null;
	var currentPeer = null;
	var screenSharing = false;
	var memRole;
	
	function createRoom() {
	    console.log("Creating Room")
	   /* chatRoomNo */
	   	let room = document.getElementById("room-input").value;
	    if (room == " " || room == "") {
	        /* 무조건 생성되어야함 다시 목록으로 */
	        if(memRole.equals("ROL001")){ // 학생
	        	alert("상담 입장에 실패했습니다. 다시 입장해주십시오.");
	        	window.href = "redirect:/DYUniv/student/counsel/counselList.do";
	        } else { // 교수
	        	alert("상담 입장에 실패했습니다. 다시 입장해주십시오.");
	        	window.href = "redirect:/DYUniv/professor/counsel/counselList.do";
	        }
	    }
	    room_id = PRE + room + SUF;
	    peer = new Peer(room_id)
	    peer.on('open', (id) => {
	        console.log("Peer Connected with ID: ", id)
	       /*  hideModal() */
	        getUserMedia({ video: true, audio: true }, (stream) => {
	            local_stream = stream;
	            setLocalStream(local_stream)
	        }, (err) => {
	            console.log(err)
	        })
	        notify("Waiting for peer to join.")
	    })
	    peer.on('call', (call) => {
	        call.answer(local_stream);
	        call.on('stream', (stream) => {
	            setRemoteStream(stream)
	        })
	        currentPeer = call;
	    })
	}

	function setLocalStream(stream) {

	    let video = document.getElementById("local-video");
	    video.srcObject = stream;
	    video.muted = true;
	    video.play();
	}
	function setRemoteStream(stream) {

	    let video = document.getElementById("remote-video");
	    video.srcObject = stream;
	    video.play();
	}

	/* function hideModal() {
	    document.getElementById("entry-modal").hidden = true
	} */

	function notify(msg) {
	    let notification = document.getElementById("notification")
	    notification.innerHTML = msg
	    notification.hidden = false
	    setTimeout(() => {
	        notification.hidden = true;
	    }, 3000)
	}

	function joinRoom() {
	    console.log("Joining Room")
	    let room = document.getElementById("room-input").value;
	    if (room == " " || room == "") {
	        alert("Please enter room number")
	        return;
	    }
	    room_id = PRE + room + SUF;
	   /*  hideModal() */
	    peer = new Peer()
	    peer.on('open', (id) => {
	        console.log("Connected with Id: " + id)
	        getUserMedia({ video: true, audio: true }, (stream) => {
	            local_stream = stream;
	            setLocalStream(local_stream)
	            notify("Joining peer")
	            let call = peer.call(room_id, stream)
	            call.on('stream', (stream) => {
	                setRemoteStream(stream);
	            })
	            currentPeer = call;
	        }, (err) => {
	            console.log(err)
	        })

	    })
	}

	function startScreenShare() {
	    if (screenSharing) {
	        stopScreenSharing()
	    }
	    navigator.mediaDevices.getDisplayMedia({ video: true }).then((stream) => {
	        screenStream = stream;
	        let videoTrack = screenStream.getVideoTracks()[0];
	        videoTrack.onended = () => {
	            stopScreenSharing()
	        }
	        if (peer) {
	            let sender = currentPeer.peerConnection.getSenders().find(function (s) {
	                return s.track.kind == videoTrack.kind;
	            })
	            sender.replaceTrack(videoTrack)
	            screenSharing = true
	        }
	        console.log(screenStream);
	    })
	}

	function stopScreenSharing() {
	    if (!screenSharing) return;
	    let videoTrack = local_stream.getVideoTracks()[0];
	    if (peer) {
	        let sender = currentPeer.peerConnection.getSenders().find(function (s) {
	            return s.track.kind == videoTrack.kind;
	        })
	        sender.replaceTrack(videoTrack)
	    }
	    screenStream.getTracks().forEach(function (track) {
	        track.stop();
	    });
	    screenSharing = false
	}
</script>